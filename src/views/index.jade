!!! 5
//if IE 7
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 8
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 9
  html(lang="en", class="no-js ie9", data-ng-app="main", id="ng-app")
//if [(gt IE 9)|!(IE)] <!
html(class="no-js", ng-app="main")
  // <![endif]
  head
    meta(charset="utf-8")
    title Reveal.js Template
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
    meta(name="description", content="Reveal JS Template")
    link(href="./assets/css/style.css", rel="stylesheet", type="text/css")

  body
    .reveal
      .opi-logo
      .slides
        section(data-state="index-slide")
          h2 Angular JS "controller As" Syntax
          h4 and why you should be using it
          p.
            <small> Created by <a href="http://twitter.com/rodneystockings">Alex Reed</a>  | Consultant | <a href="http://www.objectpartners.com/">Object Partners</a></small>
            <img src="./assets/img/2015-OPI-Logo-Long.png" style="background:none; border:none; box-shadow:none;"/>
        section
          h2 What all we will cover
          ol
            li The conceptual difference of controllerAs
            li The changes in directive and route definitions
            li The benefits and why you should be using it
            li The gotchas when transitioning (for me at least)

        section
          section
            h2 The (Classic) Controller Syntax
            p.
              Pre Angular v1.2, we were depdendent upon the <code>$scope</code> variable for binding to the view or exposing functions to the DOM.
            p.
              A controller didn't look much like a controller without <code>$scope</code> sprinkled everywhere
              
          section
            h4 This should look pretty familiar...
            <a href="http://plnkr.co/edit/viIScctXTLcWq9ES1QKZ?p=preview">the classic controller syntax</a>
            h6 The template
            <code>
              <body ng-controller="MainCtrl">
                <p>Hello {{name}}!</p>
              </body>
            </code>
            h6 the js
            <code>
                var app = angular.module('ng-nebraska', []);

                app.controller('MainCtrl', function($scope) {
                  $scope.name = 'ng-nebraska';
                });
            </code>

        section
          section
            h2 It's been real, <code>$scope</code>
            p.
              If Angular is just JavaScript, why doesn't it look more like it?
            
          section
            h4 Side by side comparison between JS class and NG controller 
          
          section
            h4 side by side showing of controller snippet + template snippet to draw connections
          
        section
          section
            h2 How controllerAs changes:
            h4 Custom Directives
            
          section
            h2 <code>controllerAs</code> property
            p. // simple code example to show the most basic with a controllerAs property -- you can also do it 'controller as Ctrl', I think... need to check
            
          section
            h2 <code>bindToController</code> property
            h4 Post angular 1.3.0, this property becomes available
            p. explain a bit about how this works
            p. // give code example of this in action -- keep it to the simple "true" value in this slide
            
          section
            h2 <code>bindToController</code> property cont.
            h4 Post angular 1.4.0, this property adaptation becomes available
            p. alternatively, you can set the scope property you want in the object on bindToController, and then set scope to 'true'
            p. // give code example of this 
            
        section
          h2 How controllerAs changes:
          h4 ui-router state definitions
          
          p. // can likely just keep this slide one deep and include code example showing slight config change

        section
          section
            h2 Benefits
            
          section
            h4 explicitly specific binding in the template
            p.
              snippet to showcase the nested controller example, specifically the impact it has on templates
          
          section
            h4 resist temptation of $scope "conveninces"
            p.
              Makes you __really__ think about using that $scope.$watch
            p. can remove $scope as a dependency in a majority of controllers, bringing it in for the exception case, not the norm
            
          section
            h4 combats $scope soup? should I keep this??
            
          section
            h4 eliminates the need for the "dot" rule
            p.
              Why we use(d) the "dot" rule?
              // code example showcasing the downfall of not using a dot in classic controller syntax
              
          section
            h4 "dot" rule continued.
            p.
              perhaps need to explain (and possibly snag the snippet of angular source) 
              how controllerAs controllers get created and how "this" really gets put onto $scope as whatever 
              the string value you have as the "controllerAs" setting
              
          section
            h4 Moving towards the future of the web
            p.
              controllerAs syntax moves angular in the direction web components (or react components)
      
        section
          section
            h2 Gotchas!
            
          section
            h4 Angular's FormController
            p.
              Accessing formController is a bit different - you need to declare the form name prefixed with the assigned controllerAs name
              // code example of putting controllerAs name in front of the desired form name
          
          section
            h4 Accessing controllerAs scope variables elsewhere -- not sure i'm going to keep this
             p. remember that you'll have to prefix any propety name with assigned controller name
             p. however, if you find yourself prefixing in custom directives, you should probably narrow the scope of your directive
             
          section
            h4 using <code>$watch</code>ers with controllerAs
            
        section
          h1 The END 
          h4 Q&A?


    script(src="./assets/js/app.js")
